# This file is used by GN for building, which is NOT the build system used for
# building official binaries.
# Please take a look at node.gyp if you are making changes to build system.

import("node.gni")
import("$node_v8_path/gni/snapshot_toolchain.gni")
import("$node_v8_path/gni/v8.gni")

# The actual configurations are put inside a template in unofficial.gni to
# prevent accidental edits from contributors.
template("node_gn_build") {
  config("node_features") {
    defines = []
    if (is_component_build) {
      defines += [
        "USING_UV_SHARED",
        "USING_V8_SHARED",
      ]
    }
    if (node_use_openssl) {
      defines += [ "HAVE_OPENSSL=1" ]
    } else {
      defines += [ "HAVE_OPENSSL=0" ]
    }
    if (node_use_amaro) {
      defines += [ "HAVE_AMARO=1" ]
    } else {
      defines += [ "HAVE_AMARO=0" ]
    }
    if (node_use_v8_platform) {
      defines += [ "NODE_USE_V8_PLATFORM=1" ]
    } else {
      defines += [ "NODE_USE_V8_PLATFORM=0" ]
    }
    if (node_enable_inspector) {
      defines += [ "HAVE_INSPECTOR=1" ]
    } else {
      defines += [ "HAVE_INSPECTOR=0" ]
    }
    if (node_use_node_code_cache) {
      defines += [ "NODE_USE_NODE_CODE_CACHE=1" ]
    }
    if (v8_enable_i18n_support) {
      defines += [ "NODE_HAVE_I18N_SUPPORT=1" ]
    }
  }

  config("node_external_config") {
    include_dirs = [
      target_gen_dir,
      "src",
    ]
    defines = [
      "NODE_WANT_INTERNALS=1",
      "NODE_EMBEDDER_MODULE_VERSION=$node_module_version",
    ]
    configs = [
      ":node_features",
      "$node_v8_path:external_config",
    ]
  }

  config("node_internal_config") {
    visibility = [
      ":*",
      "src/inspector:*",
    ]
    configs = [ ":node_external_config" ]
    libs = []
    cflags = [ "-Wno-microsof-include" ]
    cflags_cc = [
      "-Wno-deprecated-declarations",
      "-Wno-extra-semi",
      "-Wno-implicit-fallthrough",
      "-Wno-macro-redefined",
      "-Wno-missing-braces",
      "-Wno-range-loop-bind-reference",
      "-Wno-return-type",
      "-Wno-shadow",
      "-Wno-sometimes-uninitialized",
      "-Wno-string-plus-int",
      "-Wno-string-conversion",
      "-Wno-unreachable-code",
      "-Wno-unreachable-code-break",
      "-Wno-unreachable-code-return",
      "-Wno-unused-label",
      "-Wno-unused-private-field",
      "-Wno-unused-variable",
      "-Wno-unused-function",
    ]

    if (current_cpu == "x86") {
      node_arch = "ia32"
    } else {
      node_arch = target_cpu
    }
    if (target_os == "win") {
      node_platform = "win32"
    } else if (target_os == "mac") {
      node_platform = "darwin"
    } else {
      node_platform = target_os
    }
    defines = [
      "NODE_ARCH=\"$node_arch\"",
      "NODE_PLATFORM=\"$node_platform\"",
      "NODE_REPORT"
    ]

    if (is_win) {
      defines += [
        "NOMINMAX",
        "_UNICODE=1",
      ]
    } else {
      defines += [ "__POSIX__" ]
    }
    if (node_tag != "") {
      defines += [ "NODE_TAG=\"$node_tag\"" ]
    }
    if (node_v8_options != "") {
      defines += [ "NODE_V8_OPTIONS=\"$node_v8_options\"" ]
    }
    if (node_release_urlbase != "") {
      defines += [ "NODE_RELEASE_URLBASE=\"$node_release_urlbase\"" ]
    }
    if (node_use_openssl) {
      defines += [
        "NODE_OPENSSL_SYSTEM_CERT_PATH=\"$node_openssl_system_cert_path\"",
      ]
    }
  }

  gypi_values = exec_script("./tools/gypi_to_gn.py",
                            [ rebase_path("node.gyp"),
                              "--replace=<@(node_builtin_shareable_builtins)=" ],
                            "scope",
                            [ "node.gyp" ])

  source_set("libnode") {}
}
